navigation_command:
  - ${navigation_directions_command}
  - ${navigation_duration_command}
  - ${navigation_estimate_arrival_command}
  - ${navigation_estimate_departure_command}

navigation_query:
  - text: ${navigation_traffic_query}
    code: ${navigation_traffic_query}
    var: ${navigation_traffic_query:var}
  - text: ${navigation_estimate_arrival_query}
    code: ${navigation_estimate_arrival_query}
    var: ${navigation_estimate_arrival_query:Var}
  - text: ${navigation_estimate_departure_query}
    code: ${navigation_estimate_departure_query}
    var: ${navigation_estimate_departure_query:Var}

navigation_directions_command:
  - text: ${directions_verb} ${source} ${destination}
    code: |
      ${source}
      ${destination}
      directions = navigation.get_directions(source=${source:var}, destination=${destination:var})
      ResponderCommand.default_responder(response=directions)
    var: directions
  - text: ${directions_verb} ${destination} ${source}
    code: |
      ${source}
      ${destination}
      directions = navigation.get_directions(source=${source:var}, destination=${destination:var})
      ResponderCommand.default_responder(response=directions)
    var: directions
  - text: ${directions_verb} ${destination}
    code: |
      ${source}
      ${destination}
      directions = navigation.get_directions(destination=${destination:var})
      ResponderCommand.default_responder(response=directions)
    var: directions
  - text: ${directions_verb} ${source} ${destination} ${at_date_time}
    code: |
      ${source}
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      directions = navigation.get_directions(source=${source:var}, destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=directions)
    var: directions
  - text: ${directions_verb} ${destination} ${source} ${at_date_time}
    code: |
      ${source}
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      directions = navigation.get_directions(source=${source:var}, destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=directions)
    var: directions
  - text: ${directions_verb} ${destination} ${at_date_time}
    code: |
      ${source}
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      directions = navigation.get_directions(destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=directions)
    var: directions

navigation_duration_command:
  - text: tell me how long will it take me to arrive ${destination}
    code: |
      ${destination}
      duration = NavigationQuery.get_duration(destination=${destination:var})
      ResponderCommand.default_responder(response=duration)
    var: duration
  - text: tell me how long will it take me to arrive ${destination} ${at_date_time}
    code: |
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      duration = NavigationQuery.get_duration(destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=duration)
    var: duration
  - text: tell me how long will it take me to arrive ${at_date_time} ${destination}
    code: |
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      duration = NavigationQuery.get_duration(destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=duration)
    var: duration

navigation_estimate_arrival_command:
  - text: tell me when will I arrive at ${destination} if I leave ${at_date_time}
    code: |
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      arrival = NavigationQuery.get_estimated_arrival(destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=arrival)
  - text: tell me when will I arrive at ${destination} if I leave ${at_date_time} from ${source}
    code: |
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      ${source}
      arrival = NavigationQuery.get_estimated_arrival(source=${source:var}, destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=arrival)
  - text: tell me when will I arrive at ${destination} if I leave from ${source} ${at_date_time}
    code: |
      ${destination}
      ${source}
      ${at_date_time}
      date_time = ${at_date_time:var}
      arrival = NavigationQuery.get_estimated_arrival(source=${source:var}, destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=arrival)

navigation_estimate_departure_command:
  - text: tell me when I should leave to get ${destination} ${at_date_time}
    code: |
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      departure = NavigationQuery.get_estimated_departure(destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=departure)
  - text: tell me when I should leave to get ${destination} ${at_date_time} from ${source}
    code: |
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      ${source}
      departure = NavigationQuery.get_estimated_departure(source=${source:var}, destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=departure)
  - text: tell me when I should leave to get ${destination} from ${source} ${at_date_time}
    code: |
      ${destination}
      ${source}
      ${at_date_time}
      date_time = ${at_date_time:var}
      departure = NavigationQuery.get_estimated_departure(source=${source:var}, destination=${destination:var}, date_time=date_time)
      ResponderCommand.default_responder(response=departure)

navigation_traffic_query:
  - text: there is ${traffic_condition} ${traffic_location}
    code: |
      ${traffic_condition}
      ${traffic_location}
      traffic_info = NavigationQuery.get_traffic_info(location=${traffic_location:var}, traffic_condition=${traffic_condition:var})
      traffic_result = len(list(traffic_info)) > 0
    var: traffic_result
  - text: there will be ${traffic_condition} in ${traffic_location} ${at_date_time}
    code: |
      ${traffic_condition}
      ${traffic_location}
      ${at_date_time}
      date_time = ${at_date_time:var}
      traffic_info = NavigationQuery.get_traffic_info(location=${traffic_location:var}, traffic_condition=${traffic_condition:var}, date_time=date_time)
      traffic_result = len(list(traffic_info)) > 0
    var: traffic_result
  - text: there is ${traffic_condition} in ${traffic_location.1} ${cc} ${traffic_location.2}
    code: |
      ${traffic_condition}
      ${traffic_location.1}
      ${traffic_location.2}
      traffic_result = True
      for location in [${traffic_location.1:var}, ${traffic_location.2:var}]:
        traffic_info = NavigationQuery.get_traffic_info(location=location, traffic_condition=${traffic_condition:var})
        traffic_result = traffic_result ${cc} len(list(traffic_info)) > 0 if traffic is not None else len(list(traffic)) > 0
    var: traffic_result

navigation_driving_duration_query:
  - text: it will take me ${time_duration} to arrive at ${destination}
    code: |
      ${time_duration}
      ${destination}
      duration = NavigationQuery.get_duration(destination=${destination:var}, time_duration=${time_duration:var})
      duration_result = len(list(duration))
    var: duration_result
  - text: it will take me ${time_duration} to arrive at ${destination} ${at_date_time}
    code: |
      ${time_duration}
      ${destination}
      ${at_date_time}
      date_time = ${at_date_time:var}
      duration = NavigationQuery.get_duration(destination=${destination:var}, time_duration=${time_duration:var})
      duration_result = len(list(duration))
    var: duration_result
  - text: it will take me ${time_duration} ${at_date_time} to arrive at ${destination} from ${source}
    code: |
      ${time_duration}
      ${at_date_time}
      date_time = ${at_date_time:var}
      ${destination}
      ${source}
      duration = NavigationQuery.get_duration(destination=${destination:var}, time_duration=${time_duration:var})
      duration_result = len(list(duration))
    var: duration_result

navigation_estimate_arrival_query:
  - text: I will arrive ${arrival_time} to ${destination} when I leave ${departure_time}
    code: |
      ${arrival_time}
      ${destination}
      ${departure_time}
      arrival = NavigationQuery.get_estimated_arrival(destination=${destination:var}, departure_time=${departure_time:var}, arrival_time=${arrival_time:var})
      arrival_result = len(list(arrival)) > 0
  - text: I will arrive ${arrival_time} to ${destination} when I leave from ${source} ${departure_time}
    code: |
      ${arrival_time}
      ${destination}
      ${source}
      ${departure_time}
      arrival = NavigationQuery.get_estimated_arrival(source=${source:var}, destination=${destination:var}, departure_time=${departure_time:var}, arrival_time=${arrival_time:var})
      arrival_result = len(list(arrival)) > 0

navigation_estimate_departure_query:
  - text: I need to leave ${departure_time} to get ${destination} ${arrival_time}
    code: |
      ${departure_time}
      ${destination}
      ${arrival_time}
      departure = NavigationQuery.get_estimated_departure(destination=${destination:var}, departure_time=${departure_time:var}, arrival_time=${arrival_time:var})
      departure_result = len(list(departure)) > 0
  - text: I need to leave ${departure_time} ${source} to get ${destination} ${arrival_time}
    code: |
      ${departure_time}
      ${source}
      ${destination}
      ${arrival_time}
      departure = NavigationQuery.get_estimated_departure(source=${source:var}, destination=${destination:var}, departure_time=${departure_time:var}, arrival_time=${arrival_time:var})
      departure_result = len(list(departure)) > 0

directions_verb:
  - get directions
  - give me the directions
  - directions

destination:
  - text: ${to_location}
    code: |
      ${to_location}
      ${destination:var} = ${to_location:var}
    var: destination
    coreference_value: to there

source:
  - text: ${from_location}
    code: |
      ${from_location}
      ${source:var} = ${from_location:var}
    var: source
    coreference_value: from there

traffic_location:
  - text: around ${location_landmark}
    code: ${location_landmark}
    var: location
  - text: near ${location_landmark}
    code: ${location_landmark}
    var: location #${location_landmark:var}
  - text: in ${location_path}
    code: ${location_path}
    var: location #${location_path:var}

traffic_condition:
  - text: ${traffic_condition_term}
    code: |
      ${traffic_condition:var} = TrafficCondition.resolve_from_text("${traffic_condition_term}")
    var: traffic_condition

traffic_condition_term:
  - traffic
  - traffic jam
  - construction

time_duration:
  - text: ${time_duration_value}
    code: |
      ${time_duration:var} = TimeDuration.resolve_from_text("${time_duration_value}")
    var: time_duration

time_duration_value:
  - over an hour
  - 15 minutes
  - 30 minutes
  - 45 minutes
  - half an hour
  - an hour and a half

arrival_time:
  - text: ${navigation_time}
    code: |
      ${navigation_time}
      ${arrival_time:var} = ${navigation_time:var}
    var: arrival_time

departure_time:
  - text: ${navigation_time}
    code: |
      ${navigation_time}
      ${departure_time:var} = ${navigation_time:var}
    var: departure_time

navigation_time:
  - text: before ${at_date_time}
    code: |
      ${at_date_time}
      date_time = ${at_date_time:var}
    var: date_time
  - text: ${at_date_time}
    code: |
      ${at_date_time}
      date_time = ${at_date_time:var}
    var: date_time
